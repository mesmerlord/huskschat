datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum EmailType {
  WELCOME_EMAIL
  LOGIN_EMAIL
  FREE_CREDITS
  UNKNOWN
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  rooms         Room[]
  Email         Email[]
  Payment       Payment[]

  @@map("users")
}

model Room {
  id         String    @id @default(cuid())
  externalId String    @unique @map("external_id")
  name       String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  userId     String?
  User       User?     @relation(fields: [userId], references: [id])
  messages   Message[]

  @@map("rooms")
}

model Message {
  id        String   @id @default(cuid())
  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  role      String
  roomId    String
  Room      Room?    @relation(fields: [roomId], references: [id])

  @@map("messages")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Payment {
  id              String   @id @default(cuid())
  type            String
  status          String
  stripeSessionId String
  createdAt       DateTime @default(now())
  userId          String
  User            User?    @relation(fields: [userId], references: [id])

  @@map("payments")
}

model Email {
  id        String    @id @default(cuid())
  type      EmailType @default(UNKNOWN)
  createdAt DateTime  @default(now())
  userId    String
  User      User?     @relation(fields: [userId], references: [id])
}
